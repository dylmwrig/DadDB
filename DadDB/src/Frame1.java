import java.awt.EventQueue;
import java.awt.GridBagLayout;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JTextField;

import net.proteanit.sql.DbUtils;

import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.awt.event.ActionEvent;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.JRadioButton;
import java.awt.Font;

public class Frame1 
{
	private JFrame frame;
	private JTable table;
	private JTextField textFieldMain;
	private JTextField textFieldSeries;
	private JTextField textFieldIssue;
	private JTextField textFieldAuthor;
	private JTextField textFieldArtist;
	private JTextField textFieldPublisher;
	
	private int id = 1; //primary key: increments when adding a comic, decrements when subtracting one
	private JTextField textFieldID;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) 
	{
		//DatabaseAccess.cleanDB();
		EventQueue.invokeLater(new Runnable() 
		{
			public void run() 
			{
				try 
				{
					Frame1 window = new Frame1();
					window.frame.setVisible(true);
				} //end try
				
				catch (Exception e) 
				{
					e.printStackTrace();
				} //end catch
			} //end run
		}); //end invokeLater (What is invokeLater lol it was autogenerated by GridBagLayout)
	} //end main

	/**
	 * Create the application.
	 */
	public Frame1() 
	{
		System.out.println(DatabaseAccess.checkIfEmpty());
	    initialize();
	} //end constructor
	
	
	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() 
	{
		Database.createDB();
		//the reason I'm declaring two separate sets of connections and prepared statements in the same method is that idk if an issue could arise from reusing these variables and don't truthfully care to test rn
		//this beginning block of code is to ensure that we have a table even created (through the createDb method) in addition to setting the global id variable to 1 + the highest id number in the table
		//it does this through this query right here, which pulls the last row by sorting in a descending fashion and pulling only the first result
		id = DatabaseAccess.newId();
		
		System.out.println("Id in the beginning " + id);
		
		/*
		String query = "SELECT * FROM " + Database.getTableName() + " ORDER BY " + Database.getColId() + " DESC LIMIT 1;";
		Connection con = sqliteConnection.dbConnector();
		try
		{
			PreparedStatement prep = con.prepareStatement(query);
			ResultSet result = prep.executeQuery();
			id = result.getInt(Database.getColId()) + 1;
		} //end try
		
		catch (Exception x)
		{
	   		x.printStackTrace();
		} //end catch
		
		finally
		   {
			   try
			   {
				   con.close();
			   } //end try
			   
			   catch (Exception e)
			   {
				   System.out.println("Failed to close the database");
			   } //end catch
		   } //end finally
		*/
		
		frame = new JFrame();
		frame.setBounds(100, 100, 1017, 731);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.columnWidths = new int[]{78, 50, 50, 80, 704, 0};
		gridBagLayout.rowHeights = new int[]{88, 23, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 48, 283, 0}; 
		gridBagLayout.columnWeights = new double[]{0.0, 1.0, 1.0, 0.0, 0.0, Double.MIN_VALUE};
		gridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.9E-324};
		frame.getContentPane().setLayout(gridBagLayout);
		
		//load in comics ordered by id number
		JButton btnLoadComics = new JButton("Load Comics");
		btnLoadComics.addActionListener(new ActionListener() 
		{
		   public void actionPerformed(ActionEvent e) 
		   {
			   //fill ResultSet with information from the database then set that to the java table in the GUI
			   ResultSet rs = DatabaseAccess.showTable();
			   if (rs == null)
			   {
				   System.out.println("Result set is null.");
			   }
			   
			   else
			   {
				   System.out.println("Result set is not null");
			   }
			   
			   table.setModel(DbUtils.resultSetToTableModel(rs));
		   } //end actionPerformed
		}); //end actionListener
		
		//add the comic using the addComic method in DatabaseAccess
		//one issue I was having is that the global id was originally changed within the addComic method when it was still
		//in this class. However, as it is moving to another class and the id could possibly be changed more than once,
		//this raises an issue. I suggest we simply check the last item in the database, and set ID to 1 plus whatever
		//that entry's id is, as the add method always adds to the end of the table. You could also possibly make id a 
		//property of the Database class and use getters and setters, that could be a good solution as well.
		JButton btnAddComic = new JButton("Add Comic");
		btnAddComic.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent e) 
			{
				ResultSet rs = DatabaseAccess.addComic(textFieldMain.getText(), textFieldSeries.getText(), textFieldIssue.getText(), textFieldAuthor.getText(),
						textFieldArtist.getText(), textFieldPublisher.getText(), id);
				table.setModel(DbUtils.resultSetToTableModel(rs));
				id = DatabaseAccess.newId();
			} //end actionPerformed
		}); //end ActionListener
		GridBagConstraints gbc_btnAddComic = new GridBagConstraints();
		gbc_btnAddComic.anchor = GridBagConstraints.EAST;
		gbc_btnAddComic.insets = new Insets(0, 0, 5, 5);
		gbc_btnAddComic.gridx = 0;
		gbc_btnAddComic.gridy = 1;
		frame.getContentPane().add(btnAddComic, gbc_btnAddComic);
		
		JButton btnSortComics = new JButton("Sort Comics");
//COPIED FROM HERE
		
		GridBagConstraints gbc_btnSortComics = new GridBagConstraints();
		gbc_btnSortComics.gridwidth = 1;
		gbc_btnSortComics.anchor = GridBagConstraints.WEST;
		gbc_btnSortComics.insets = new Insets(0, 0, 5, 5);
		gbc_btnSortComics.gridx = 1;
		gbc_btnSortComics.gridy = 1;
		frame.getContentPane().add(btnSortComics, gbc_btnSortComics);
		
		//edit an entry based on id number
		//pretty self explanatory, edit a given field if the user has entered something in that field
		//supports num/dash/num to allow for editing multiple comics at once, probably the easiest implementation of that I've done so far
		JButton btnEditComic = new JButton("Edit Comic");
		btnEditComic.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent e) 
			{
				boolean keepGoing = true;
				boolean firstTime = true;
				
				int idToChange = -1;
				int start = -1;
				int end = -1;
				
				while (keepGoing)
				{
					if (DatabaseAccess.checkIntField(Database.getColId(), textFieldID.getText(), textFieldIssue.getText()))
					{
						if (firstTime) //if we do this on more than the first time through, start will never change
						{              //maybe a little sloppy but the else clause on this if else kind of relies on the if a few lines up
							if (DatabaseAccess.checkDash(textFieldID.getText()))
							{
								String[] splitDash = textFieldID.getText().split("-");
								
								if (Integer.parseInt(splitDash[0]) < Integer.parseInt(splitDash[1]))
								{
									start = Integer.parseInt(splitDash[0]);
									end = Integer.parseInt(splitDash[1]);
								} //end if
	
								else if (Integer.parseInt(splitDash[0]) > Integer.parseInt(splitDash[1]))
								{
									start = Integer.parseInt(splitDash[1]);
									end = Integer.parseInt(splitDash[0]);
								} //end if
								
								else
								{
									start = Integer.parseInt(splitDash[0]);
									end = start;
								} //end else
								
								idToChange = start;
							} //end if
							
							else
							{
								idToChange = Integer.parseInt(textFieldID.getText());
							} //end else
						} //end if
							
						System.out.println("Start and end " + start + " " + end);
						
						if (textFieldMain.getText().length() > 0) //is the text field not empty?
						{										  //if so, call updateData for that field
							Database.updateData(Database.getColMain(), textFieldMain.getText(), idToChange);
						} //end if
						
						if (textFieldSeries.getText().length() > 0)
						{
							Database.updateData(Database.getColSeries(), textFieldSeries.getText(), idToChange);
						} //end if
						
						if (textFieldIssue.getText().length() > 0)
						{
							if (DatabaseAccess.checkIntField(Database.getColIssue(), textFieldID.getText(), Integer.toString(idToChange)))
							{
								Database.updateData(Database.getColIssue(), textFieldIssue.getText(), idToChange);
							} //end if
						} //end if
						
						if (textFieldAuthor.getText().length() > 0)
						{
							Database.updateData(Database.getColAuthor(), textFieldAuthor.getText(), idToChange);
						} //end if
						
						if (textFieldArtist.getText().length() > 0)
						{
							Database.updateData(Database.getColArtist(), textFieldArtist.getText(), idToChange);
						} //end if
						
						if (textFieldPublisher.getText().length() > 0)
						{
							Database.updateData(Database.getColPublisher(), textFieldPublisher.getText(), idToChange);
						} //end if
					
						if (start == end)
						{
							keepGoing = false;
						} //end if
						
						idToChange++;
						start++;
						firstTime = false;
					} //end if
				} //end while
				ResultSet rs = DatabaseAccess.showTable();
				table.setModel(DbUtils.resultSetToTableModel(rs));
			} //end actionPerformed
		}); //end ActionListener
		
		GridBagConstraints gbc_btnEditComic = new GridBagConstraints();
		gbc_btnEditComic.insets = new Insets(0, 0, 5, 5);
		gbc_btnEditComic.gridx = 2;
		gbc_btnEditComic.gridy = 1;
		frame.getContentPane().add(btnEditComic, gbc_btnEditComic);
		
		//clears the entries
		JButton btnClear = new JButton("Clear");
		btnClear.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent arg0) 
			{
				textFieldMain.setText(null);
				textFieldSeries.setText(null);
				textFieldIssue.setText(null);
				textFieldAuthor.setText(null);
				textFieldArtist.setText(null);
				textFieldPublisher.setText(null);
				textFieldID.setText(null);
			} //end actionPerformed
		}); //end ActionListener
		GridBagConstraints gbc_btnClear = new GridBagConstraints();
		gbc_btnClear.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnClear.insets = new Insets(0, 0, 5, 5);
		gbc_btnClear.gridx = 3;
		gbc_btnClear.gridy = 1;
		frame.getContentPane().add(btnClear, gbc_btnClear);
		
		GridBagConstraints gbc_btnLoadComics = new GridBagConstraints();
		gbc_btnLoadComics.insets = new Insets(0, 0, 5, 0);
		gbc_btnLoadComics.anchor = GridBagConstraints.NORTHEAST;
		gbc_btnLoadComics.gridx = 4;
		gbc_btnLoadComics.gridy = 1;
		frame.getContentPane().add(btnLoadComics, gbc_btnLoadComics);
		
		JLabel lblMainSeries = new JLabel("Main Series");
		lblMainSeries.setHorizontalAlignment(SwingConstants.LEFT);
		GridBagConstraints gbc_lblMainSeries = new GridBagConstraints();
		gbc_lblMainSeries.insets = new Insets(0, 0, 5, 5);
		gbc_lblMainSeries.anchor = GridBagConstraints.EAST;
		gbc_lblMainSeries.fill = GridBagConstraints.VERTICAL;
		gbc_lblMainSeries.gridx = 0;
		gbc_lblMainSeries.gridy = 2;
		frame.getContentPane().add(lblMainSeries, gbc_lblMainSeries);
		
		textFieldMain = new JTextField();
		GridBagConstraints gbc_textFieldMain = new GridBagConstraints();
		gbc_textFieldMain.gridwidth = 2;
		gbc_textFieldMain.insets = new Insets(0, 0, 5, 5);
		gbc_textFieldMain.fill = GridBagConstraints.HORIZONTAL;
		gbc_textFieldMain.gridx = 1;
		gbc_textFieldMain.gridy = 2;
		frame.getContentPane().add(textFieldMain, gbc_textFieldMain);
		textFieldMain.setColumns(10);
		
		JScrollPane scrollPane = new JScrollPane();
		GridBagConstraints gbc_scrollPane = new GridBagConstraints();
		gbc_scrollPane.gridwidth = 2;
		gbc_scrollPane.insets = new Insets(0, 0, 5, 0);
		gbc_scrollPane.fill = GridBagConstraints.BOTH;
		gbc_scrollPane.gridheight = 12;
		gbc_scrollPane.weightx = 6.0;
		gbc_scrollPane.weighty = 6.0;
		gbc_scrollPane.gridx = 3;
		gbc_scrollPane.gridy = 2;
		frame.getContentPane().add(scrollPane, gbc_scrollPane);
		
		table = new JTable();
		scrollPane.setViewportView(table);
		
		JLabel lblSeries = new JLabel("Series");
		lblSeries.setHorizontalAlignment(SwingConstants.LEFT);
		GridBagConstraints gbc_lblSeries = new GridBagConstraints();
		gbc_lblSeries.anchor = GridBagConstraints.EAST;
		gbc_lblSeries.insets = new Insets(0, 0, 5, 5);
		gbc_lblSeries.fill = GridBagConstraints.VERTICAL;
		gbc_lblSeries.gridx = 0;
		gbc_lblSeries.gridy = 3;
		frame.getContentPane().add(lblSeries, gbc_lblSeries);
		
		textFieldSeries = new JTextField();
		GridBagConstraints gbc_textFieldSeries = new GridBagConstraints();
		gbc_textFieldSeries.gridwidth = 2;
		gbc_textFieldSeries.insets = new Insets(0, 0, 5, 5);
		gbc_textFieldSeries.fill = GridBagConstraints.HORIZONTAL;
		gbc_textFieldSeries.gridx = 1;
		gbc_textFieldSeries.gridy = 3;
		frame.getContentPane().add(textFieldSeries, gbc_textFieldSeries);
		textFieldSeries.setColumns(10);
		
		//NumberFormat parseInt = NumberFormat.getIntegerInstance();
		textFieldIssue = new JTextField();
		GridBagConstraints gbc_textFieldIssue = new GridBagConstraints();
		gbc_textFieldIssue.gridwidth = 2;
		gbc_textFieldIssue.insets = new Insets(0, 0, 5, 5);
		gbc_textFieldIssue.fill = GridBagConstraints.HORIZONTAL;
		gbc_textFieldIssue.gridx = 1;
		gbc_textFieldIssue.gridy = 4;
		frame.getContentPane().add(textFieldIssue, gbc_textFieldIssue);
		textFieldIssue.setColumns(10);
		/*
		 * I was originally going to restrict input by using a mask, restricted to numerical input only
		 * however, this was creating whitespace that wasn't very user friendly so I decided to create my own number check method
		try
		{
			MaskFormatter mask = new MaskFormatter("####");
			//mask.setInvalidCharacters("?");
			mask.install(textFieldIssue);
		} //end try
		
		catch (Exception e)
		{
			System.out.println("Issue adding the formatter");
		} //end catch
		*/
		JLabel lblAuthor = new JLabel("Author");
		lblAuthor.setHorizontalAlignment(SwingConstants.LEFT);
		GridBagConstraints gbc_lblAuthor = new GridBagConstraints();
		gbc_lblAuthor.insets = new Insets(0, 0, 5, 5);
		gbc_lblAuthor.anchor = GridBagConstraints.EAST;
		gbc_lblAuthor.gridx = 0;
		gbc_lblAuthor.gridy = 5;
		frame.getContentPane().add(lblAuthor, gbc_lblAuthor);
		
		JLabel lblIssueNumber = new JLabel("Issue Number");
		lblIssueNumber.setHorizontalAlignment(SwingConstants.LEFT);
		GridBagConstraints gbc_lblIssueNumber = new GridBagConstraints();
		gbc_lblIssueNumber.insets = new Insets(0, 0, 5, 5);
		gbc_lblIssueNumber.anchor = GridBagConstraints.EAST;
		gbc_lblIssueNumber.gridx = 0;
		gbc_lblIssueNumber.gridy = 4;
		frame.getContentPane().add(lblIssueNumber, gbc_lblIssueNumber);
		
		textFieldAuthor = new JTextField();
		GridBagConstraints gbc_textFieldAuthor = new GridBagConstraints();
		gbc_textFieldAuthor.gridwidth = 2;
		gbc_textFieldAuthor.insets = new Insets(0, 0, 5, 5);
		gbc_textFieldAuthor.fill = GridBagConstraints.HORIZONTAL;
		gbc_textFieldAuthor.gridx = 1;
		gbc_textFieldAuthor.gridy = 5;
		frame.getContentPane().add(textFieldAuthor, gbc_textFieldAuthor);
		textFieldAuthor.setColumns(10);
		
		JLabel lblArtist = new JLabel("Artist");
		lblArtist.setHorizontalAlignment(SwingConstants.LEFT);
		GridBagConstraints gbc_lblArtist = new GridBagConstraints();
		gbc_lblArtist.anchor = GridBagConstraints.EAST;
		gbc_lblArtist.insets = new Insets(0, 0, 5, 5);
		gbc_lblArtist.fill = GridBagConstraints.VERTICAL;
		gbc_lblArtist.gridx = 0;
		gbc_lblArtist.gridy = 6;
		frame.getContentPane().add(lblArtist, gbc_lblArtist);
		
		textFieldArtist = new JTextField();
		GridBagConstraints gbc_textFieldArtist = new GridBagConstraints();
		gbc_textFieldArtist.gridwidth = 2;
		gbc_textFieldArtist.insets = new Insets(0, 0, 5, 5);
		gbc_textFieldArtist.fill = GridBagConstraints.HORIZONTAL;
		gbc_textFieldArtist.gridx = 1;
		gbc_textFieldArtist.gridy = 6;
		frame.getContentPane().add(textFieldArtist, gbc_textFieldArtist);
		textFieldArtist.setColumns(10);
		
		JLabel lblPublisher = new JLabel("Publisher");
		lblPublisher.setHorizontalAlignment(SwingConstants.LEFT);
		GridBagConstraints gbc_lblPublisher = new GridBagConstraints();
		gbc_lblPublisher.gridheight = 1;
		gbc_lblPublisher.insets = new Insets(0, 0, 5, 5);
		gbc_lblPublisher.anchor = GridBagConstraints.EAST;
		gbc_lblPublisher.gridx = 0;
		gbc_lblPublisher.gridy = 7;
		frame.getContentPane().add(lblPublisher, gbc_lblPublisher);
		
		textFieldPublisher = new JTextField();
		GridBagConstraints gbc_textFieldPublisher = new GridBagConstraints();
		gbc_textFieldPublisher.gridwidth = 2;
		gbc_textFieldPublisher.gridheight = 1;
		gbc_textFieldPublisher.anchor = GridBagConstraints.NORTH;
		gbc_textFieldPublisher.insets = new Insets(0, 0, 5, 5);
		gbc_textFieldPublisher.fill = GridBagConstraints.HORIZONTAL;
		gbc_textFieldPublisher.gridx = 1;
		gbc_textFieldPublisher.gridy = 7;
		frame.getContentPane().add(textFieldPublisher, gbc_textFieldPublisher);
		textFieldPublisher.setColumns(10);
		
		JLabel lblOrderBy = new JLabel("Order by");
		lblOrderBy.setFont(new Font("Tahoma", Font.BOLD, 11));
		GridBagConstraints gbc_lblOrderBy = new GridBagConstraints();
		gbc_lblOrderBy.anchor = GridBagConstraints.EAST;
		gbc_lblOrderBy.insets = new Insets(0, 0, 5, 5);
		gbc_lblOrderBy.gridx = 0;
		gbc_lblOrderBy.gridy = 8;
		frame.getContentPane().add(lblOrderBy, gbc_lblOrderBy);
		
		//group the buttons according to what they do
		//ordering the buttons makes it so selecting one deselects the others in the group
		ButtonGroup orderField = new ButtonGroup();
		ButtonGroup orderBy = new ButtonGroup();
		
		JRadioButton rdbtnMain = new JRadioButton("Main");
		GridBagConstraints gbc_rdbtnMain = new GridBagConstraints();
		gbc_rdbtnMain.anchor = GridBagConstraints.WEST;
		gbc_rdbtnMain.insets = new Insets(0, 0, 5, 5);
		gbc_rdbtnMain.gridx = 1;
		gbc_rdbtnMain.gridy = 8;
		frame.getContentPane().add(rdbtnMain, gbc_rdbtnMain);
		
		JRadioButton rdbtnSeries = new JRadioButton("Series");
		GridBagConstraints gbc_rdbtnSeries = new GridBagConstraints();
		gbc_rdbtnSeries.anchor = GridBagConstraints.WEST;
		gbc_rdbtnSeries.insets = new Insets(0, 0, 5, 5);
		gbc_rdbtnSeries.gridx = 2;
		gbc_rdbtnSeries.gridy = 8;
		frame.getContentPane().add(rdbtnSeries, gbc_rdbtnSeries);
		
		JRadioButton rdbtnId = new JRadioButton("ID");
		GridBagConstraints gbc_rdbtnId = new GridBagConstraints();
		gbc_rdbtnId.anchor = GridBagConstraints.EAST;
		gbc_rdbtnId.insets = new Insets(0, 0, 5, 5);
		gbc_rdbtnId.gridx = 0;
		gbc_rdbtnId.gridy = 9;
		frame.getContentPane().add(rdbtnId, gbc_rdbtnId);
		
		JRadioButton rdbtnIssue = new JRadioButton("Issue#");
		GridBagConstraints gbc_rdbtnIssue = new GridBagConstraints();
		gbc_rdbtnIssue.anchor = GridBagConstraints.WEST;
		gbc_rdbtnIssue.insets = new Insets(0, 0, 5, 5);
		gbc_rdbtnIssue.gridx = 1;
		gbc_rdbtnIssue.gridy = 9;
		frame.getContentPane().add(rdbtnIssue, gbc_rdbtnIssue);
		
		JRadioButton rdbtnAuthor = new JRadioButton("Author");
		GridBagConstraints gbc_rdbtnAuthor = new GridBagConstraints();
		gbc_rdbtnAuthor.anchor = GridBagConstraints.WEST;
		gbc_rdbtnAuthor.insets = new Insets(0, 0, 5, 5);
		gbc_rdbtnAuthor.gridx = 2;
		gbc_rdbtnAuthor.gridy = 9;
		frame.getContentPane().add(rdbtnAuthor, gbc_rdbtnAuthor);
		
		JLabel lblAscendingOrDescending = new JLabel("<html>Ascending or <br>Descending?</html>"); //html is used for making the text in the button split between two lines
		lblAscendingOrDescending.setFont(new Font("Tahoma", Font.BOLD, 11));
		GridBagConstraints gbc_lblAscendingOrDescending = new GridBagConstraints();
		gbc_lblAscendingOrDescending.anchor = GridBagConstraints.SOUTHEAST;
		gbc_lblAscendingOrDescending.gridheight = 2;
		gbc_lblAscendingOrDescending.insets = new Insets(0, 0, 5, 5);
		gbc_lblAscendingOrDescending.gridx = 0;
		gbc_lblAscendingOrDescending.gridy = 10;
		frame.getContentPane().add(lblAscendingOrDescending, gbc_lblAscendingOrDescending);
		
		JRadioButton rdbtnArtist = new JRadioButton("Artist");
		GridBagConstraints gbc_rdbtnArtist = new GridBagConstraints();
		gbc_rdbtnArtist.anchor = GridBagConstraints.WEST;
		gbc_rdbtnArtist.insets = new Insets(0, 0, 5, 5);
		gbc_rdbtnArtist.gridx = 1;
		gbc_rdbtnArtist.gridy = 10;
		frame.getContentPane().add(rdbtnArtist, gbc_rdbtnArtist);
		
		JRadioButton rdbtnPublisher = new JRadioButton("Publisher");
		GridBagConstraints gbc_rdbtnPublisher = new GridBagConstraints();
		gbc_rdbtnPublisher.anchor = GridBagConstraints.WEST;
		gbc_rdbtnPublisher.insets = new Insets(0, 0, 5, 5);
		gbc_rdbtnPublisher.gridx = 2;
		gbc_rdbtnPublisher.gridy = 10;
		frame.getContentPane().add(rdbtnPublisher, gbc_rdbtnPublisher);
		
		orderField.add(rdbtnId);
		orderField.add(rdbtnMain);
		orderField.add(rdbtnSeries);
		orderField.add(rdbtnIssue);
		orderField.add(rdbtnAuthor);
		orderField.add(rdbtnArtist);
		orderField.add(rdbtnPublisher);
		
		JRadioButton rdbtnAscending = new JRadioButton("Ascending");
		GridBagConstraints gbc_rdbtnAscending = new GridBagConstraints();
		gbc_rdbtnAscending.anchor = GridBagConstraints.WEST;
		gbc_rdbtnAscending.insets = new Insets(0, 0, 5, 5);
		gbc_rdbtnAscending.gridx = 1;
		gbc_rdbtnAscending.gridy = 11;
		frame.getContentPane().add(rdbtnAscending, gbc_rdbtnAscending);
		
		JRadioButton rdbtnDescending = new JRadioButton("Descending");
		GridBagConstraints gbc_rdbtnDescending = new GridBagConstraints();
		gbc_rdbtnDescending.anchor = GridBagConstraints.WEST;
		gbc_rdbtnDescending.insets = new Insets(0, 0, 5, 5);
		gbc_rdbtnDescending.gridx = 2;
		gbc_rdbtnDescending.gridy = 11;
		frame.getContentPane().add(rdbtnDescending, gbc_rdbtnDescending);
		
		orderBy.add(rdbtnAscending);
		orderBy.add(rdbtnDescending);
		
		//delete comic method
		//one original issue I wanted to address with this is that if you delete a value with a specific id number, you'll create holes
		//in the table. So if you delete issue #5 in the table, the id numbers will jump from 4 to 6.
		//so this method calls deleteComic then finds the data entries with a higher number than what we're subtracting by and subtracts
		//from them an appropriate amount. You also have to do the same with id number so the primary key stays up to date.
		//This method also supports the number/dash/number functionality which is why it deletes entries in a while loop
		//that part of the code is pretty self explanatory and is explained in other parts of this program, namely the sort method.
		JButton buttonDelete = new JButton("Delete Comic");
		buttonDelete.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent arg0) 
			{
				if (id == 1)
				{
					JOptionPane.showMessageDialog(null,  "Please add some comics first.", "Error", JOptionPane.ERROR_MESSAGE);
				} //end if
				
				else if (DatabaseAccess.checkIntField(Database.getColId(), textFieldID.getText(), textFieldSeries.getText())) //check that the input is even good
				{
					int idChoice = -1;
					int start = -1;
					int end = -1;
					
					//these keep track of how many times we've gone through the loop for key constraint stuff and for subtracting from subsequent id numbers
					int difference = 0;
					int idDiff = 0;
					
					boolean keepGoing = true;
					
					Connection con = sqliteConnection.dbConnector();
					
					if (DatabaseAccess.checkDash(textFieldID.getText()))
					{
						String[] dashSep = textFieldID.getText().split("-");

						if (Integer.parseInt(dashSep[0]) < Integer.parseInt(dashSep[1]))
						{
							start = Integer.parseInt(dashSep[0]);
							end = Integer.parseInt(dashSep[1]);
						} //end if
						
						else if (Integer.parseInt(dashSep[0]) > Integer.parseInt(dashSep[1]))
						{
							start = Integer.parseInt(dashSep[1]);
							end = Integer.parseInt(dashSep[0]);
						} //end else
						
						else //the numbers on either end of the dash are equal for some reason
						{
							start = Integer.parseInt(dashSep[0]);
							end = start;
						} //end else
						
						int reply = JOptionPane.showConfirmDialog(null, "You're about to delete comics with ID " + start + " through " + end + ".", "Are you sure?",  JOptionPane.YES_NO_OPTION);
						if (reply == JOptionPane.NO_OPTION)
						{
							keepGoing = false;
						} //end if
						
						else if ((end - start) > 9)
						{
							reply = JOptionPane.showConfirmDialog(null, "Are you really sure? That's a lot of comics" + ".", "Are you sure?",  JOptionPane.YES_NO_OPTION);
							if (reply == JOptionPane.NO_OPTION)
							{
								keepGoing = false;
							} //end if
						} //end else
						idChoice = start;
					} //end if
					
					else
					{
						int reply = JOptionPane.showConfirmDialog(null, "You're about to delete the comic with id number " + idChoice + ".", "Are you sure?",  JOptionPane.YES_NO_OPTION);
						if (reply == JOptionPane.NO_OPTION)
						{
							keepGoing = false;
						} //end if
						
						idChoice = Integer.parseInt(textFieldID.getText());
					} //end else
					
					String query = "";

					ResultSet rs = null;
					ResultSet rsShow = null; //used to display the table at the end
					
					PreparedStatement pst = null;
					PreparedStatement pst2 = null;
					
					while (keepGoing) 
					{
						
						Database.deleteData(idChoice);
						
						if (start == end)
						{
							keepGoing = false;
						} //end if
						
						start++;
						idChoice++; //I could take care of some of these with one integer but idk I like being clear fuk of
						difference++; //keeps track of how much we're subtracting from id numbers to keep unique ids
						idDiff++; //subtract from the id number because there are is now one less id in the database
					} //end while
					
					idChoice--;
					
					//this only needs to execute after everything that needs to be removed is removed.
					if (id != idChoice) //if this is not the last comic in the db
					{
						query = "SELECT * FROM " + Database.getTableName() + " WHERE " + Database.getColId() + " >= " + idChoice + ";";
						
						try
						{
							pst = con.prepareStatement(query);
							rs = pst.executeQuery();
							
							while (rs.next())
							{
								int idToChange = rs.getInt(Database.getColId());
								
								//this line shows that the correct rows/id numbers are being identified
								//this is the problem line
								query = "UPDATE " + Database.getTableName() + " SET " + Database.getColId() + " = " + (idToChange - difference) + " WHERE " + 
								Database.getColId() + " = " + idToChange + ";";
								pst2 = con.prepareStatement(query);
								pst2.executeUpdate();
							} //end while
						} //end try
						
						catch (Exception x)
						{
					   		x.printStackTrace();
						} //end catch
					} //end if

					id -= idDiff; //subtract the amount of comics that we've removed to avoid key constraint errors
								  //I'm doing this at the end because above I'm using if id == idChoice as a conditional and this doesn't work otherwise
					rsShow = DatabaseAccess.showTable();
					table.setModel(DbUtils.resultSetToTableModel(rsShow));
					
					try
				    {
						//we don't want to try to close connections which aren't even open, so check
						if (pst != null)
						{
							pst.close();
						} //end if
						
						if (rs != null)
						{
							rs.close();
						} //end if
						
					    if (pst2 != null)
					    {
					    	pst2.close();
					    } //end if
					    
					    rsShow.close(); //these were opened for sure
					    con.close();
				    } //end try
				   
				    catch (Exception e)
				    {
					    System.out.println("Failed to close the database");
				    } //end catch
				} //end else if
			} //end actionPerformed
		}); //end ActionListener
		GridBagConstraints gbc_buttonDelete = new GridBagConstraints();
		gbc_buttonDelete.insets = new Insets(0, 0, 5, 5);
		gbc_buttonDelete.gridx = 0;
		gbc_buttonDelete.gridy = 12;
		frame.getContentPane().add(buttonDelete, gbc_buttonDelete);
		
		JLabel lblDelete = new JLabel("<html>Id to delete<br>or modify:</html>");
		lblDelete.setFont(new Font("Tahoma", Font.BOLD, 11));
		GridBagConstraints gbc_lblDelete = new GridBagConstraints();
		gbc_lblDelete.insets = new Insets(0, 0, 5, 5);
		gbc_lblDelete.gridx = 1;
		gbc_lblDelete.gridy = 12;
		frame.getContentPane().add(lblDelete, gbc_lblDelete);
		
		textFieldID = new JTextField();
		GridBagConstraints gbc_textFieldID = new GridBagConstraints();
		gbc_textFieldID.insets = new Insets(0, 0, 5, 5);
		gbc_textFieldID.fill = GridBagConstraints.HORIZONTAL;
		gbc_textFieldID.gridx = 2;
		gbc_textFieldID.gridy = 12;
		frame.getContentPane().add(textFieldID, gbc_textFieldID);
		textFieldID.setColumns(10);
		
		JButton btnPrint = new JButton("Print");
		btnPrint.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				try
				{
					 boolean complete = table.print(); //table has a built in print method, it returns a boolean to indicate success status
					 if (complete)
					 { //got this from programmingknowledge, format for showMessageDialog is parentComponent, message, title for the dialog, and the message type
						 JOptionPane.showMessageDialog(null,  "Done Printing", "Information", JOptionPane.INFORMATION_MESSAGE);
					 } //end if
					 
					 else
					 {
						 JOptionPane.showMessageDialog(null, "Printing!", "Printer", JOptionPane.ERROR_MESSAGE);
					 } //end else
				} //end try
				
				catch (PrinterException x)
				{
					JOptionPane.showMessageDialog(null, x);
				} //end catch
			} //end actionListener				
		}); //end ActionListener
		
		GridBagConstraints gbc_btnPrint = new GridBagConstraints();
		gbc_btnPrint.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnPrint.anchor = GridBagConstraints.NORTH;
		gbc_btnPrint.insets = new Insets(0, 0, 5, 5);
		gbc_btnPrint.gridx = 0;
		gbc_btnPrint.gridy = 13;
		frame.getContentPane().add(btnPrint, gbc_btnPrint);
		
		JButton btnReadMe = new JButton("Read Me");
		btnReadMe.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent arg0) 
			{ //
				ProcessBuilder pb = new ProcessBuilder("C:\\Windows\\notepad.exe", "C:\\Users\\Ninjalazer\\Documents\\Programming\\Java\\DadDBPC\\README.txt");
				//ProcessBuilder pb = new ProcessBuilder("C:\\Windows\\notepad.exe", "C:\\Users\\NursingSmartz\\Documents\\DadDB\\README.txt");

				try
				{
					pb.start();
				} //end try
				
				catch (Exception e)
				{
					JOptionPane.showMessageDialog(null, "Could not open the text file", "Error", JOptionPane.ERROR_MESSAGE);
				} //end catch
			} //end actionPerformed
		}); //end ActionListener
		GridBagConstraints gbc_btnReadMe = new GridBagConstraints();
		gbc_btnReadMe.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnReadMe.anchor = GridBagConstraints.NORTH;
		gbc_btnReadMe.insets = new Insets(0, 0, 5, 5);
		gbc_btnReadMe.gridx = 1;
		gbc_btnReadMe.gridy = 13;
		frame.getContentPane().add(btnReadMe, gbc_btnReadMe);

		btnSortComics.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				try
				{
					ResultSet rs = DatabaseAccess.sortData(textFieldMain.getText(), textFieldSeries.getText(), textFieldIssue.getText(), textFieldAuthor.getText(),
						textFieldArtist.getText(), textFieldPublisher.getText(), textFieldID.getText(), rdbtnAscending.isSelected(), rdbtnDescending.isSelected(),
						rdbtnMain.isSelected(), rdbtnSeries.isSelected(), rdbtnIssue.isSelected(), rdbtnAuthor.isSelected(), rdbtnPublisher.isSelected(), rdbtnId.isSelected());
					table.setModel(DbUtils.resultSetToTableModel(rs)); //TableModel is the interface for filling a GUI representation of a table
				} //end try
				
				catch (Exception x)
				{
					x.printStackTrace();
				} //end catch
			} //end actionPerformed
		}); //end ActionListener
	} //end initialize
} //end Frame1
